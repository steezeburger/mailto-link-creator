{"version":3,"sources":["lib/mailtoLinkGenerator.js","lib/tinyUrlLinkGenerator.js","App.js","serviceWorker.js","index.js"],"names":["createLink","pipe","body","cc","subject","to","encodeURIComponent","concat","App","useState","setBody","setCC","setSubject","setTo","onShortenLinkClick","createTinyUrlLink","window","open","form","link","createMailToLink","className","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","target","readOnly","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAWeA,EAFIC,aAPD,SAAC,GAAD,IAChBC,EADgB,EAChBA,KACAC,EAFgB,EAEhBA,GACAC,EAHgB,EAGhBA,QACAC,EAJgB,EAIhBA,GAJgB,uBAKFA,EALE,eAKOF,EALP,oBAKqBC,EALrB,iBAKqCF,KAEpBI,oB,QCLpBN,EAFIO,YAAO,wD,MCiFXC,MA7Ef,WAAiB,IAAD,EACUC,mBAAS,IADnB,mBACPP,EADO,KACDQ,EADC,OAEMD,mBAAS,IAFf,mBAEPN,EAFO,KAEHQ,EAFG,OAGgBF,mBAAS,IAHzB,mBAGPL,EAHO,KAGEQ,EAHF,OAIMH,mBAAS,IAJf,mBAIPJ,EAJO,KAIHQ,EAJG,KAWRC,EAAqBb,YAAKc,EAAmBC,OAAOC,MAEpDC,EAAO,CACXhB,OACAC,KACAC,UACAC,MAGIc,EAAOC,EAAiBF,GAE9B,OACE,yBAAKG,UAAU,OAEb,qDACA,6KAKA,yBAAKA,UAAU,aACb,0BAAMC,SAAU,SAACC,GAAD,OAAOA,EAAEC,mBACvB,wBAAIH,UAAU,cAEZ,4BACE,2BAAOI,QAAQ,MAAf,MACA,2BAAOC,KAAK,OAAOC,GAAG,KAAKC,MAAOV,EAAKb,GAAIwB,SA5BpC,SAACN,GAAD,OAAOV,EAAMU,EAAEO,OAAOF,WA+B/B,4BACE,2BAAOH,QAAQ,MAAf,MACA,2BAAOC,KAAK,OAAOC,GAAG,KAAKC,MAAOV,EAAKf,GAAI0B,SAnCpC,SAACN,GAAD,OAAOZ,EAAMY,EAAEO,OAAOF,WAsC/B,4BACE,2BAAOH,QAAQ,WAAf,WACA,2BAAOC,KAAK,OAAOC,GAAG,UAAUC,MAAOV,EAAKd,QAASyB,SAvCzC,SAACN,GAAD,OAAOX,EAAWW,EAAEO,OAAOF,WA0CzC,4BACE,2BAAOH,QAAQ,QAAf,QACA,8BAAUJ,UAAU,OAAOK,KAAK,OAAOC,GAAG,OAAOC,MAAOV,EAAKhB,KAAM2B,SA9C1D,SAACN,GAAD,OAAOb,EAAQa,EAAEO,OAAOF,WAiDnC,4BACE,2BAAOH,QAAQ,WAAf,WACA,yBAAKJ,UAAU,WACb,8BAAUM,GAAG,UAAUI,UAAQ,EAACH,MAAOT,IACvC,mHAIJ,4BACE,4BAAQQ,GAAG,eAAeD,KAAK,SAASM,QAAS,SAACT,GAAD,OAAQA,EAAEC,gBAAkBV,EAAmBK,KAAhG,6CCxDMc,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3475da01.chunk.js","sourcesContent":["import { pipe } from 'ramda'\n\nconst buildLink = ({\n  body,\n  cc,\n  subject,\n  to,\n}) => `mailto:${to}?cc=${cc}&subject=${subject}&body=${body}`\n\nconst createLink = pipe(buildLink, encodeURIComponent)\n\nexport default createLink\n","import { concat } from 'ramda'\n\nconst createLink = concat('https://tinyurl.com/create.php?source=indexpage&url=')\n\nexport default createLink\n","import { pipe } from 'ramda'\nimport React, { useState } from 'react'\nimport createMailToLink from './lib/mailtoLinkGenerator'\nimport createTinyUrlLink from './lib/tinyUrlLinkGenerator'\nimport './App.css'\n\nfunction App () {\n  const [body, setBody] = useState('')\n  const [cc, setCC] = useState('')\n  const [subject, setSubject] = useState('')\n  const [to, setTo] = useState('')\n\n  const onBodyChange = (e) => setBody(e.target.value)\n  const onCCChange = (e) => setCC(e.target.value)\n  const onSubjectChange = (e) => setSubject(e.target.value)\n  const onToChange = (e) => setTo(e.target.value)\n\n  const onShortenLinkClick = pipe(createTinyUrlLink, window.open)\n\n  const form = {\n    body,\n    cc,\n    subject,\n    to,\n  }\n\n  const link = createMailToLink(form)\n\n  return (\n    <div className=\"App\">\n\n      <p>`mailto:` link creator</p>\n      <p>\n        use this tool to create links that can be opened in an email client,\n        with fields such as \"to\", \"cc\", \"subject\", and \"body\" already filled out.\n      </p>\n\n      <div className=\"container\">\n        <form onSubmit={(e) => e.preventDefault() }>\n          <ul className=\"flex-outer\">\n\n            <li>\n              <label htmlFor=\"to\">to</label>\n              <input type=\"text\" id=\"to\" value={form.to} onChange={onToChange}/>\n            </li>\n\n            <li>\n              <label htmlFor=\"cc\">cc</label>\n              <input type=\"text\" id=\"cc\" value={form.cc} onChange={onCCChange}/>\n            </li>\n\n            <li>\n              <label htmlFor=\"subject\">subject</label>\n              <input type=\"text\" id=\"subject\" value={form.subject} onChange={onSubjectChange}/>\n            </li>\n\n            <li>\n              <label htmlFor=\"body\">body</label>\n              <textarea className=\"body\" type=\"text\" id=\"body\" value={form.body} onChange={onBodyChange}/>\n            </li>\n\n            <li>\n              <label htmlFor=\"results\">results</label>\n              <div className=\"results\">\n                <textarea id=\"results\" readOnly value={link} />\n                <p>note: this is the unshortened link. shortening the link makes it easiser to share.</p>\n              </div>\n            </li>\n\n            <li>\n              <button id=\"shorten-link\" type=\"submit\" onClick={(e) => (e.preventDefault && onShortenLinkClick(link))}>\n                generate shortened link via TinyUrl\n              </button>\n            </li>\n\n          </ul>\n        </form>\n      </div>\n\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}